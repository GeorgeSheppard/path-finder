{"version":3,"sources":["assets/maze.svg","Canvas/canvas.tsx","Utilities/utilities.js","Algorithms/solver.ts","Algorithms/Dijkstra/dijkstra.ts","redux/reducer.ts","redux/store.ts","redux/actions.ts","redux/dispatchers.ts","Algorithms/base.js","Hexagon/hexagon.tsx","hooks/stateHook.ts","HexagonGrid/hexagonGrid.tsx","HexagonGrid/hexagonGridManager.tsx","Toolbar/toolbar.tsx","App.js","index.js"],"names":["module","exports","Canvas","props","state","ref","createRef","windowSize","height","width","this","setState","current","offsetHeight","offsetWidth","nextProps","nextState","currentWindow","nextWindow","style","overflow","backgroundColor","Component","siderWidth","headerHeight","React","arrayEquals","a","b","Array","isArray","length","every","val","index","twoDToOneDCoord","coord","sizeY","openNotification","title","message","duration","notification","open","description","neighbours","sizeX","x","y","map","filter","PathError","m","Object","setPrototypeOf","prototype","Error","solver","grid1D","shortestPathGrid","startCoord","endCoord","moveOrder","coords","iterations","checkedCoordsOrder","curCoord","shift","moves","move","coord1D","type","console","log","push","path","finishedShortestPathGrid","coordsOrder","dijkstraMoveOrder","limitedState","wall","goal","start","space","animated","initialState","algorithm","selected","mouseState","fullHexagonStates","individualHexagonStates","gridSize","reset","createStore","action","newIndividualHexagonStates","newFullHexagonStates","payload","newState","stringCoord","toString","currentState","listCoord","oldLimitedCoord","hexStringCoord","split","Number","animatedWipedHexagonIndividualStates","key","animationWipedHexagonFullStates","dispatchHexagonState","store","dispatch","dispatchNewSelected","dispatchAnimationStopped","pathFinder","hexagonStates","dispatchPath","dispatchSolverAnimation","fill","wallCoord","goal1DCoord","start1DCoord","getState","setTimeout","checkedPeriod","slice","reverse","pathPeriod","error","StyledHexagon","styled","div","middleWidth","middleHeight","topBotDiameter","left","topBot","StyledHexagonWithBorder","largeHex","smallHex","leftShift","downShift","smallHexTransform","zIndex","transform","hexagonStylingProps","Math","sqrt","margin","scaleTransform","Hexagon","handleChange","event","oldType","button","newType","hexagonState","useSelector","useHexagonState","typeToStyling","onClick","onMouseOver","handleHover","onMouseDown","onDragStart","preventDefault","onContextMenu","HexagonGrid","pixelsCoords","gridProps","i","offsetX","offsetY","HexagonGridManager","borderWidth","spacing","horizontalSpacing","verticalSpacing","coordToPixels","pixelsX","pixelsY","floor","j","createGrid","hexagonCssProps","reducedHexagonCssProps","SubMenu","Menu","Sider","Layout","Header","Toolbar","headerStyle","useState","paddingLeft","paddingRight","float","src","maze","alt","color","theme","mode","position","display","justifyContent","Item","top","right","copyable","alignItems","href","GithubOutlined","fontSize","LinkedinOutlined","className","icon","UserOutlined","undefined","LaptopOutlined","NotificationOutlined","dispatchNewAlgorithm","marginTop","marginRight","marginLeft","shape","size","disabled","router","block","App","handleMouseDown","onMouseUp","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2b8c0fc8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/maze.298f4121.svg\";","import React, { createRef } from \"react\";\r\n\r\ntype CanvasProps = {\r\n  Component: Function;\r\n  [key: string]: any;\r\n};\r\n\r\nexport type WindowSize = {\r\n  height: number;\r\n  width: number;\r\n};\r\n\r\ntype Ref = React.RefObject<HTMLDivElement>;\r\n\r\ntype CanvasState = {\r\n  ref: Ref;\r\n  windowSize: {\r\n    height: number;\r\n    width: number;\r\n  };\r\n};\r\n\r\n/**\r\n * Helper component that sends the size of the window it fills to the child\r\n * component\r\n * @param {object} props the child component, and any props to pass to the child\r\n * component\r\n */\r\nclass Canvas extends React.Component<CanvasProps, CanvasState> {\r\n  constructor(props: CanvasProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      ref: createRef(),\r\n      windowSize: {\r\n        height: 0,\r\n        width: 0,\r\n      },\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const ref: Ref = this.state.ref;\r\n    this.setState({\r\n      windowSize: {\r\n        height: ref.current?.offsetHeight ?? 0,\r\n        width: ref.current?.offsetWidth ?? 0,\r\n      },\r\n    });\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps: CanvasProps, nextState: CanvasState) {\r\n    const currentWindow = this.state.windowSize;\r\n    const nextWindow = nextState.windowSize;\r\n    return (\r\n      currentWindow.height !== nextWindow.height ||\r\n      currentWindow.width !== nextWindow.width\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const canvasStyle = {\r\n      overflow: \"hidden\",\r\n      height: \"100vh\",\r\n      width: \"100vw\",\r\n      backgroundColor: \"#dddddd\",\r\n    };\r\n\r\n    return (\r\n      <div ref={this.state.ref} style={canvasStyle}>\r\n        <this.props.Component\r\n          {...{\r\n            windowSize: this.state.windowSize,\r\n            siderWidth: this.props.siderWidth,\r\n            headerHeight: this.props.headerHeight,\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Canvas;\r\n","import { notification } from \"antd\";\r\n\r\nexport function arrayEquals(a, b) {\r\n  return (\r\n    Array.isArray(a) &&\r\n    Array.isArray(b) &&\r\n    a.length === b.length &&\r\n    a.every((val, index) => val === b[index])\r\n  );\r\n}\r\n\r\nexport function twoDToOneDCoord(coord, sizeY) {\r\n  return coord[0] * sizeY + coord[1];\r\n}\r\n\r\nexport const openNotification = (title, message, duration = 4.5) => {\r\n  notification.open({\r\n    message: title,\r\n    description: message,\r\n    duration,\r\n  });\r\n};\r\n","import { arrayEquals, twoDToOneDCoord } from \"../Utilities/utilities\";\r\nimport { Coord, Coords } from \"../types/dtypes\";\r\n\r\ntype Grid1D = Array<1 | 0 | -1>;\r\ntype ShortestPathGrid = Array<Coord | -1>;\r\ntype MoveOrder = (\r\n  neighbours: Coords,\r\n  curCoord: Coord,\r\n  startCoord: Coord,\r\n  endCoord: Coord\r\n) => Coords;\r\n\r\nexport const neighbours = (\r\n  coord: Coord,\r\n  sizeX: number,\r\n  sizeY: number\r\n): Coords => {\r\n  const [x, y] = coord;\r\n\r\n  let neighboursRelative;\r\n  if (y % 2 === 0) {\r\n    neighboursRelative = [\r\n      [-1, -1],\r\n      [0, -1],\r\n      [1, 0],\r\n      [0, 1],\r\n      [-1, 1],\r\n      [-1, 0],\r\n    ];\r\n  } else {\r\n    neighboursRelative = [\r\n      [0, -1],\r\n      [1, -1],\r\n      [1, 0],\r\n      [1, 1],\r\n      [0, 1],\r\n      [-1, 0],\r\n    ];\r\n  }\r\n\r\n  return neighboursRelative\r\n    .map((coord) => [coord[0] + x, coord[1] + y])\r\n    .filter((coord) => {\r\n      const [x, y] = coord;\r\n      return x >= 0 && x < sizeX && y >= 0 && y < sizeY;\r\n    }) as Coords;\r\n};\r\n\r\nexport class PathError extends Error {\r\n  constructor(m: string) {\r\n    super(m);\r\n\r\n    Object.setPrototypeOf(this, PathError.prototype);\r\n  }\r\n}\r\n\r\nexport const solver = (\r\n  grid1D: Grid1D,\r\n  shortestPathGrid: ShortestPathGrid,\r\n  startCoord: Coord,\r\n  endCoord: Coord,\r\n  sizeX: number,\r\n  sizeY: number,\r\n  moveOrder: MoveOrder\r\n) => {\r\n  let coords = [startCoord];\r\n  let iterations = 0;\r\n  let checkedCoordsOrder = [];\r\n\r\n  while (coords.length > 0) {\r\n    // If a maze is solveable then at most you should have to check every square once\r\n    if (iterations > sizeX * sizeY) {\r\n      throw new Error(\"MaxIterationsError\");\r\n    }\r\n    iterations += 1;\r\n    const curCoord = coords.shift() as Coord;\r\n\r\n    // Order which neighbour tiles should be checked first\r\n    const moves = moveOrder(\r\n      neighbours(curCoord, sizeX, sizeY),\r\n      curCoord,\r\n      startCoord,\r\n      endCoord\r\n    );\r\n\r\n    for (const move of moves) {\r\n      const coord1D = twoDToOneDCoord(move, sizeY);\r\n      // Type of square to move to, 1 is end, -1 is wall\r\n      const type = grid1D[coord1D];\r\n\r\n      if (type === 1) {\r\n        // End tile found\r\n        shortestPathGrid[coord1D] = curCoord;\r\n        coords = [];\r\n        break;\r\n      } else if (type === -1) {\r\n        // Wall tile found\r\n        if (coords.length === 0) {\r\n          console.log(\r\n            \"Ran out of coordinates\",\r\n            grid1D,\r\n            shortestPathGrid,\r\n            coords,\r\n            checkedCoordsOrder\r\n          );\r\n        }\r\n      } else {\r\n        // Empty tile\r\n        // If the tile hasn't been found before, point to the previous\r\n        // tile to get there\r\n        if (\r\n          shortestPathGrid[coord1D] === -1 &&\r\n          !arrayEquals(move, startCoord)\r\n        ) {\r\n          checkedCoordsOrder.push(move);\r\n          shortestPathGrid[coord1D] = curCoord;\r\n          coords.push(move);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  const path = [endCoord];\r\n  while (path[path.length - 1] !== startCoord) {\r\n    const coord =\r\n      shortestPathGrid[twoDToOneDCoord(path[path.length - 1], sizeY)];\r\n    if (coord !== -1) {\r\n      path.push(coord);\r\n    } else {\r\n      throw new PathError(\"Path not possible\");\r\n    }\r\n  }\r\n\r\n  return {\r\n    path,\r\n    finishedShortestPathGrid: shortestPathGrid,\r\n    coordsOrder: checkedCoordsOrder,\r\n  };\r\n};\r\n","import { Coord, Coords } from \"../../types/dtypes\"\r\n\r\nexport const dijkstraMoveOrder = (neighbours: Coords, curCoord: Coord, startCoord: Coord, endCoord: Coord) => {\r\n  return neighbours;\r\n}","import {\r\n  Actions,\r\n  NEW_HEXAGON_STATE,\r\n  NEW_MOUSE_STATE,\r\n  NEW_SELECTED,\r\n  NEW_ALGORITHM,\r\n  NEW_GRID_SIZE,\r\n  RESET_ANIMATIONS,\r\n  ANIMATION_STOPPED,\r\n} from \"./actions\";\r\nimport { Coord } from \"../types/dtypes\";\r\nimport { Store, initialState } from \"./store\";\r\nimport { arrayEquals } from \"../Utilities/utilities\";\r\n\r\nconst limitedState = {\r\n  wall: false,\r\n  goal: true,\r\n  start: true,\r\n  space: false,\r\n  animated: false,\r\n  path: false,\r\n};\r\n\r\nexport const stateReducer = (\r\n  state: Store | undefined = initialState,\r\n  action: Actions\r\n) => {\r\n  switch (action.type) {\r\n    case NEW_HEXAGON_STATE:\r\n      const newIndividualHexagonStates = { ...state.individualHexagonStates };\r\n      let newFullHexagonStates = { ...state.fullHexagonStates };\r\n\r\n      const { coord, newState } = action.payload;\r\n      const stringCoord = coord.toString();\r\n\r\n      // Note: Only store hexagon state when it isn't space\r\n      if (newState !== \"space\") {\r\n        newIndividualHexagonStates[stringCoord] = newState;\r\n      } else if (stringCoord in newIndividualHexagonStates) {\r\n        // Note: If the new space is state then it should be removed from the redux store\r\n        delete newIndividualHexagonStates[stringCoord];\r\n      }\r\n\r\n      const currentState = state.individualHexagonStates[stringCoord];\r\n      if (currentState) {\r\n        // Note: Remove old state from redux\r\n        newFullHexagonStates[currentState] = newFullHexagonStates[\r\n          currentState\r\n        ].filter((listCoord: Coord) => !arrayEquals(coord, listCoord));\r\n      }\r\n\r\n      if (newState !== \"space\") {\r\n        if (limitedState[newState]) {\r\n          const oldLimitedCoord = newFullHexagonStates[newState][0];\r\n          // Note: Remove coordinate where limited hexagon used to be\r\n          if (oldLimitedCoord) {\r\n            delete newIndividualHexagonStates[oldLimitedCoord.toString()];\r\n          }\r\n          newFullHexagonStates[newState] = [coord];\r\n        } else {\r\n          newFullHexagonStates[newState].push(coord);\r\n        }\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        individualHexagonStates: newIndividualHexagonStates,\r\n        fullHexagonStates: newFullHexagonStates,\r\n      };\r\n    case NEW_MOUSE_STATE:\r\n      return { ...state, mouseState: action.payload.mouseState };\r\n    case NEW_SELECTED:\r\n      return { ...state, selected: action.payload.selected };\r\n    case NEW_ALGORITHM:\r\n      return { ...state, algorithm: action.payload.algorithm };\r\n    case NEW_GRID_SIZE:\r\n      const individualHexagonStates = { ...state.individualHexagonStates };\r\n      let fullHexagonStates = { ...state.fullHexagonStates };\r\n\r\n      for (const hexStringCoord in individualHexagonStates) {\r\n        const coord = hexStringCoord.split(\",\").map(Number);\r\n        if (\r\n          coord[0] >= action.payload.sizeX ||\r\n          coord[1] >= action.payload.sizeY\r\n        ) {\r\n          const type = individualHexagonStates[hexStringCoord];\r\n          delete individualHexagonStates[hexStringCoord];\r\n          fullHexagonStates[type] = fullHexagonStates[type].filter(\r\n            (listCoord: Coord) => !arrayEquals(coord, listCoord)\r\n          );\r\n        }\r\n      }\r\n\r\n      return {\r\n        ...state,\r\n        gridSize: { ...action.payload },\r\n        individualHexagonStates,\r\n        fullHexagonStates,\r\n      };\r\n    case RESET_ANIMATIONS:\r\n      const animatedWipedHexagonIndividualStates = {\r\n        ...state.individualHexagonStates,\r\n      };\r\n\r\n      for (const key in animatedWipedHexagonIndividualStates) {\r\n        if (\r\n          animatedWipedHexagonIndividualStates[key] === \"animated\" ||\r\n          animatedWipedHexagonIndividualStates[key] === \"path\"\r\n        ) {\r\n          delete animatedWipedHexagonIndividualStates[key];\r\n        }\r\n      }\r\n\r\n      const animationWipedHexagonFullStates = { ...state.fullHexagonStates };\r\n      animationWipedHexagonFullStates.animated = [];\r\n      animationWipedHexagonFullStates.path = [];\r\n\r\n      return {\r\n        ...state,\r\n        fullHexagonStates: animationWipedHexagonFullStates,\r\n        individualHexagonStates: animatedWipedHexagonIndividualStates,\r\n        reset: true,\r\n      };\r\n    case ANIMATION_STOPPED:\r\n      return {\r\n        ...state,\r\n        reset: false,\r\n      };\r\n    default:\r\n      console.log(\"Uncaught action\", action);\r\n      return state;\r\n  }\r\n};\r\n","import { createStore } from \"redux\";\r\nimport { stateReducer } from \"./reducer\";\r\nimport {\r\n  HexagonTypes,\r\n  Coords,\r\n  Algorithms,\r\n  StoredHexagonTypes,\r\n} from \"../types/dtypes\";\r\n\r\nexport interface Store {\r\n  fullHexagonStates: {\r\n    [K in StoredHexagonTypes]: Coords;\r\n  };\r\n  individualHexagonStates: {\r\n    [index: string]: StoredHexagonTypes;\r\n  };\r\n  mouseState: boolean;\r\n  selected: HexagonTypes;\r\n  algorithm: Algorithms | \"\";\r\n  gridSize: {\r\n    sizeX: number;\r\n    sizeY: number;\r\n  };\r\n  reset: boolean;\r\n}\r\n\r\nexport const initialState: Store = {\r\n  algorithm: \"\",\r\n  selected: \"wall\",\r\n  mouseState: false,\r\n  fullHexagonStates: {\r\n    goal: [[7, 3]],\r\n    start: [[4, 5]],\r\n    wall: [\r\n      [8, 2],\r\n      [5, 4],\r\n      [6, 7],\r\n      [5, 5],\r\n      [6, 4],\r\n      [7, 4],\r\n      [6, 5],\r\n      [7, 6],\r\n      [4, 3],\r\n      [4, 2],\r\n      [3, 2],\r\n      [7, 7],\r\n      [8, 6],\r\n      [8, 5],\r\n    ],\r\n    animated: [],\r\n    path: [],\r\n  },\r\n  individualHexagonStates: {\r\n    \"7,3\": \"goal\",\r\n    \"4,5\": \"start\",\r\n    \"8,2\": \"wall\",\r\n    \"5,4\": \"wall\",\r\n    \"6,7\": \"wall\",\r\n    \"5,5\": \"wall\",\r\n    \"6,4\": \"wall\",\r\n    \"7,4\": \"wall\",\r\n    \"6,5\": \"wall\",\r\n    \"7,6\": \"wall\",\r\n    \"4,3\": \"wall\",\r\n    \"4,2\": \"wall\",\r\n    \"3,2\": \"wall\",\r\n    \"7,7\": \"wall\",\r\n    \"8,6\": \"wall\",\r\n    \"8,5\": \"wall\",\r\n  },\r\n  gridSize: {\r\n    sizeX: 0,\r\n    sizeY: 0,\r\n  },\r\n  reset: false,\r\n};\r\n\r\nexport default createStore(stateReducer, initialState);\r\n","import { HexagonTypes, Coord, Algorithms } from \"../types/dtypes\";\r\n\r\nexport const NEW_HEXAGON_STATE = \"new_hexagon_state\";\r\n\r\nexport const NEW_MOUSE_STATE = \"new_mouse_state\";\r\n\r\nexport const NEW_SELECTED = \"new_selected\";\r\n\r\nexport const NEW_ALGORITHM = \"new_algorithm\";\r\n\r\nexport const NEW_GRID_SIZE = \"new_grid_size\";\r\n\r\nexport const RESET_ANIMATIONS = \"reset_animations\";\r\n\r\nexport const ANIMATION_STOPPED = \"animation_stopped\";\r\n\r\nexport interface NewHexagonState {\r\n  type: typeof NEW_HEXAGON_STATE;\r\n  payload: {\r\n    coord: Coord;\r\n    newState: HexagonTypes;\r\n  };\r\n}\r\n\r\nexport interface NewMouseState {\r\n  type: typeof NEW_MOUSE_STATE;\r\n  payload: {\r\n    mouseState: boolean;\r\n  };\r\n}\r\n\r\nexport interface NewSelected {\r\n  type: typeof NEW_SELECTED;\r\n  payload: {\r\n    selected: HexagonTypes;\r\n  };\r\n}\r\n\r\nexport interface NewAlgorithm {\r\n  type: typeof NEW_ALGORITHM;\r\n  payload: {\r\n    algorithm: Algorithms;\r\n  };\r\n}\r\n\r\nexport interface NewGridSize {\r\n  type: typeof NEW_GRID_SIZE;\r\n  payload: {\r\n    sizeX: number;\r\n    sizeY: number;\r\n  };\r\n}\r\n\r\nexport interface ResetAnimations {\r\n  type: typeof RESET_ANIMATIONS;\r\n}\r\n\r\nexport interface AnimationStopped {\r\n  type: typeof ANIMATION_STOPPED;\r\n}\r\n\r\nexport type Actions =\r\n  | NewHexagonState\r\n  | NewMouseState\r\n  | NewSelected\r\n  | NewAlgorithm\r\n  | NewGridSize\r\n  | ResetAnimations\r\n  | AnimationStopped;\r\n","import { HexagonTypes, Coord, Algorithms } from \"../types/dtypes\";\r\nimport {\r\n  NEW_HEXAGON_STATE,\r\n  NewHexagonState,\r\n  NEW_MOUSE_STATE,\r\n  NEW_SELECTED,\r\n  NEW_ALGORITHM,\r\n  NEW_GRID_SIZE,\r\n  RESET_ANIMATIONS,\r\n  ANIMATION_STOPPED,\r\n} from \"./actions\";\r\nimport store from \"./store\";\r\n\r\nexport const dispatchHexagonState = (coord: Coord, newState: HexagonTypes) => {\r\n  store.dispatch({\r\n    type: NEW_HEXAGON_STATE,\r\n    payload: {\r\n      coord,\r\n      newState,\r\n    },\r\n  } as NewHexagonState);\r\n};\r\n\r\nexport const dispatchNewMouseState = (mouseState: boolean) => {\r\n  store.dispatch({\r\n    type: NEW_MOUSE_STATE,\r\n    payload: {\r\n      mouseState,\r\n    },\r\n  });\r\n};\r\n\r\nexport const dispatchNewSelected = (selected: HexagonTypes) => {\r\n  store.dispatch({\r\n    type: NEW_SELECTED,\r\n    payload: {\r\n      selected,\r\n    },\r\n  });\r\n};\r\n\r\nexport const dispatchNewAlgorithm = (algorithm: Algorithms) => {\r\n  store.dispatch({\r\n    type: NEW_ALGORITHM,\r\n    payload: {\r\n      algorithm,\r\n    },\r\n  });\r\n};\r\n\r\nexport const dispatchNewGridSize = (sizeX: number, sizeY: number) => {\r\n  store.dispatch({\r\n    type: NEW_GRID_SIZE,\r\n    payload: {\r\n      sizeX,\r\n      sizeY,\r\n    },\r\n  });\r\n};\r\n\r\nexport const dispatchResetAnimation = () => {\r\n  store.dispatch({\r\n    type: RESET_ANIMATIONS,\r\n  });\r\n};\r\n\r\nexport const dispatchAnimationStopped = () => {\r\n  store.dispatch({\r\n    type: ANIMATION_STOPPED,\r\n  });\r\n};\r\n","import { twoDToOneDCoord } from \"../Utilities/utilities\";\r\nimport { solver, PathError } from \"./solver\";\r\nimport { dijkstraMoveOrder } from \"./Dijkstra/dijkstra\";\r\nimport {\r\n  dispatchAnimationStopped,\r\n  dispatchHexagonState,\r\n} from \"../redux/dispatchers\";\r\nimport store from \"../redux/store\";\r\nimport { openNotification } from \"../Utilities/utilities\";\r\n\r\nexport const router = (algorithm, hexagonStates, sizeX, sizeY) => {\r\n  let moveOrder;\r\n  switch (algorithm) {\r\n    case \"dijkstra\":\r\n      moveOrder = dijkstraMoveOrder;\r\n      break;\r\n    default:\r\n      console.log(\"unknown algorithm\", algorithm);\r\n  }\r\n  pathFinder(moveOrder, hexagonStates, sizeX, sizeY);\r\n};\r\n\r\nexport const pathFinder = async (moveOrder, hexagonStates, sizeX, sizeY) => {\r\n  console.log(hexagonStates);\r\n  // grid1D is a 1d array containing the type of each of the hexagon states\r\n  const grid1D = new Array(sizeX * sizeY).fill(0);\r\n\r\n  // shortestPathGrid will be a 1d array that contains at coordinate x, the coordinate of the\r\n  // previous coordinate on the shortest path to coordinate x\r\n  // e.g. [-1, -1, [5, 3], [0, 2], -1]\r\n  const shortestPathGrid = new Array(sizeX * sizeY).fill(-1);\r\n\r\n  console.log(hexagonStates.wall);\r\n  for (const wallCoord of hexagonStates.wall) {\r\n    grid1D[twoDToOneDCoord(wallCoord, sizeY)] = -1;\r\n  }\r\n\r\n  const goal = hexagonStates.goal[0];\r\n  const start = hexagonStates.start[0];\r\n\r\n  const goal1DCoord = twoDToOneDCoord(goal, sizeY);\r\n  grid1D[goal1DCoord] = 1;\r\n  const start1DCoord = twoDToOneDCoord(start, sizeY);\r\n  shortestPathGrid[start1DCoord] = start;\r\n\r\n  try {\r\n    const { path, finishedShortestPathGrid, coordsOrder } = solver(\r\n      grid1D,\r\n      shortestPathGrid,\r\n      start,\r\n      goal,\r\n      sizeX,\r\n      sizeY,\r\n      moveOrder\r\n    );\r\n\r\n    const pathPeriod = 3000 / path.length;\r\n    const checkedPeriod = 10000 / coordsOrder.length;\r\n\r\n    dispatchAnimationStopped();\r\n\r\n    async function dispatchPath(path) {\r\n      if (!store.getState().reset) {\r\n        if (path.length > 0) {\r\n          if (path.length === 1) {\r\n            dispatchAnimationStopped();\r\n          }\r\n          const coord = path.shift();\r\n          dispatchHexagonState(coord, \"path\");\r\n          setTimeout(() => dispatchPath(path), pathPeriod);\r\n        }\r\n      } else {\r\n        dispatchAnimationStopped();\r\n      }\r\n    }\r\n\r\n    async function dispatchSolverAnimation(coordsOrder, path) {\r\n      if (!store.getState().reset) {\r\n        if (coordsOrder.length > 0) {\r\n          const coord = coordsOrder.shift();\r\n          dispatchHexagonState(coord, \"animated\");\r\n          setTimeout(\r\n            () => dispatchSolverAnimation(coordsOrder, path),\r\n            checkedPeriod\r\n          );\r\n        } else {\r\n          dispatchPath(path.slice(1, -1).reverse());\r\n        }\r\n      } else {\r\n        dispatchAnimationStopped();\r\n      }\r\n    }\r\n\r\n    dispatchSolverAnimation(coordsOrder, path);\r\n  } catch (error) {\r\n    if (error instanceof PathError) {\r\n      openNotification(\r\n        \"Path not possible\",\r\n        \"The path you have created does not have a valid route to get to the goal, please create another maze.\",\r\n        10\r\n      );\r\n    }\r\n    console.log(\"Error\", error);\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Coord, HexagonTypes } from \"../types/dtypes\";\r\nimport { dispatchHexagonState } from \"../redux/dispatchers\";\r\nimport { useHexagonState } from \"../hooks/stateHook\";\r\nimport store from \"../redux/store\";\r\n\r\nexport interface FixedHexagonStylingProps {\r\n  middleWidth: number;\r\n  middleHeight: number;\r\n  topBotDiameter: number;\r\n  margin: number;\r\n  left: number;\r\n  topBot: number;\r\n  scaleTransform: number;\r\n}\r\n\r\nexport interface StyledHexagonProps extends FixedHexagonStylingProps {\r\n  backgroundColor: string;\r\n}\r\n// TODO: Cannot find a way to set multiple properties to the same value,\r\n// would be useful for setting border-left and border-right at the same time,\r\n// have tried using , like with &:before &:after but that doesn't work\r\n/**\r\n * A CSS hexagon, with configurable size, colours, and border\r\n */\r\nconst StyledHexagon = styled.div`\r\n  transition: 0.2s;\r\n  position: absolute;\r\n  width: ${(props: StyledHexagonProps) => `${props.middleWidth}px`};\r\n  height: ${(props: StyledHexagonProps) => `${props.middleHeight}px`};\r\n  background-color: ${(props: StyledHexagonProps) => props.backgroundColor};\r\n  &:before,\r\n  &:after {\r\n    content: \"\";\r\n    position: absolute;\r\n    width: ${(props: StyledHexagonProps) => `${props.topBotDiameter}px`};\r\n    height: ${(props: StyledHexagonProps) => `${props.topBotDiameter}px`};\r\n    left: ${(props: StyledHexagonProps) => `${props.left}px`};\r\n    transform: scaleY(0.5773502692) rotate(-45deg);\r\n    background-color: inherit;\r\n  }\r\n  &:before {\r\n    top: ${(props: StyledHexagonProps) => `${props.topBot}px`};\r\n  }\r\n  &:after {\r\n    bottom: ${(props: StyledHexagonProps) => `${props.topBot}px`};\r\n  }\r\n`;\r\n\r\nconst StyledHexagonWithBorder = (props: any) => {\r\n  const { largeHex, smallHex } = props;\r\n\r\n  const leftShift = (largeHex.middleWidth - smallHex.middleWidth) / 2;\r\n  const downShift = (largeHex.middleHeight - smallHex.middleHeight) / 2;\r\n  const smallHexTransform = `translate(${leftShift}px, ${downShift}px)`;\r\n\r\n  return (\r\n    <StyledHexagon\r\n      {...{ ...largeHex, ...props, backgroundColor: \"#000000\" }}\r\n      style={{ zIndex: 1, ...props.style }}\r\n    >\r\n      <StyledHexagon\r\n        {...{ ...smallHex, backgroundColor: props.backgroundColor }}\r\n        style={{ zIndex: 5, transform: smallHexTransform }}\r\n      />\r\n    </StyledHexagon>\r\n  );\r\n};\r\n\r\n/**\r\n * Returns an object containing all parameters that physically specify a hexagon\r\n * @param {float} width: the distance between two opposite sides of the hexagon, not\r\n * including the border width\r\n * @param {float} borderWidth: the width of the border, from the outer of the hexagon\r\n * to the outer of the border\r\n */\r\nexport const hexagonStylingProps = ({\r\n  width,\r\n}: any): FixedHexagonStylingProps => {\r\n  return {\r\n    middleWidth: width,\r\n    middleHeight: (Math.sqrt(3) / 3) * width,\r\n    topBotDiameter: width / Math.sqrt(2),\r\n    margin: (width * Math.sqrt(3)) / 6,\r\n    left: -width / (Math.sqrt(2) * 2) + width / 2,\r\n    topBot: -width / (Math.sqrt(2) * 2),\r\n    scaleTransform: Math.sqrt(3) / 3,\r\n  };\r\n};\r\n\r\n/**\r\n * Converts the type of a hexagon into the colour it's background should be\r\n * @param type: the state of the hexagon, currently 'space', 'wall', 'goal', or 'start'\r\n */\r\nconst typeToStyling = (type: string) => {\r\n  switch (type) {\r\n    case \"space\":\r\n      break;\r\n    case \"wall\":\r\n      return \"#000000\";\r\n    case \"goal\":\r\n      return \"#00ff00\";\r\n    case \"start\":\r\n      return \"#ff0000\";\r\n    case \"animated\":\r\n      return \"#ffff00\";\r\n    case \"path\":\r\n      return \"#ffa500\";\r\n    default:\r\n      break;\r\n  }\r\n  return \"#64C7CC\";\r\n};\r\n\r\nexport interface HexagonProps {\r\n  largeHex: any;\r\n  smallHex: any;\r\n  key: string;\r\n  style: any;\r\n  coord: Coord;\r\n}\r\n\r\nconst Hexagon = (props: HexagonProps) => {\r\n  const handleChange = (\r\n    event: React.MouseEvent<HTMLElement>,\r\n    oldType: HexagonTypes\r\n  ) => {\r\n    if (event.button === 0) {\r\n      const newType = store.getState().selected;\r\n      if (newType !== oldType) {\r\n        dispatchHexagonState(props.coord, newType);\r\n      }\r\n    } else if (event.button === 2) {\r\n      if (\"space\" !== oldType) {\r\n        dispatchHexagonState(props.coord, \"space\");\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleHover = (\r\n    event: React.MouseEvent<HTMLElement>,\r\n    oldType: HexagonTypes\r\n  ) => {\r\n    const mouseDown = store.getState().mouseState;\r\n\r\n    if (mouseDown) {\r\n      handleChange(event, oldType);\r\n    }\r\n  };\r\n\r\n  const type = useHexagonState(props.coord);\r\n  const { largeHex, smallHex, style } = props as HexagonProps;\r\n  const backgroundColor = typeToStyling(type);\r\n  console.log(\"rendering\");\r\n  return (\r\n    <StyledHexagonWithBorder\r\n      {...{ largeHex, smallHex, backgroundColor }}\r\n      style={style}\r\n      onClick={(event: React.MouseEvent<HTMLElement>) =>\r\n        handleChange(event, type)\r\n      }\r\n      onMouseOver={(event: React.MouseEvent<HTMLElement>) =>\r\n        handleHover(event, type)\r\n      }\r\n      onMouseDown={(event: React.MouseEvent<HTMLElement>) =>\r\n        handleChange(event, type)\r\n      }\r\n      onDragStart={(event: React.MouseEvent<HTMLElement>) =>\r\n        event.preventDefault()\r\n      }\r\n      onContextMenu={(event: React.MouseEvent<HTMLElement>) =>\r\n        event.preventDefault()\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nexport default Hexagon;\r\n","import { Coord } from \"../types/dtypes\"\r\nimport { useSelector } from \"react-redux\";\r\nimport { Store } from '../redux/store';\r\n\r\nexport function useHexagonState(coord: Coord) {\r\n  const hexagonState = useSelector((state: Store) => state.individualHexagonStates[coord.toString()]);\r\n  \r\n  if (hexagonState) {\r\n    return hexagonState;\r\n  } else {\r\n    return \"space\";\r\n  }\r\n}","import React from \"react\";\r\nimport { Coords } from \"../types/dtypes\";\r\nimport { CreateGridReturn } from \"./hexagonGridManager\";\r\nimport Hexagon, { FixedHexagonStylingProps } from \"../Hexagon/hexagon\";\r\n\r\ntype HexagonGridProps = {\r\n  pixelsCoords: Coords;\r\n  gridProps: CreateGridReturn;\r\n  largeHex: FixedHexagonStylingProps;\r\n  smallHex: FixedHexagonStylingProps;\r\n};\r\n\r\nconst HexagonGrid = (props: HexagonGridProps) => {\r\n  const { pixelsCoords, gridProps, smallHex, largeHex } = props;\r\n\r\n  return (\r\n    <div>\r\n      {gridProps &&\r\n        gridProps.coords.map((coord, i) => {\r\n          const [x, y] = coord;\r\n\r\n          const transform = pixelsCoords[i];\r\n\r\n          const { offsetX, offsetY } = gridProps;\r\n\r\n          // maps hexagons to correct coordinate and centre the entire grid\r\n          const style = {\r\n            transform: `translate(${transform[0] + offsetX}px, ${\r\n              transform[1] + offsetY\r\n            }px)`,\r\n          };\r\n\r\n          return (\r\n            <Hexagon\r\n              key={`${x}:${y}`}\r\n              style={style}\r\n              largeHex={largeHex}\r\n              smallHex={smallHex}\r\n              {...{\r\n                coord,\r\n              }}\r\n            />\r\n          );\r\n        })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HexagonGrid;\r\n","import React from \"react\";\r\nimport { WindowSize } from \"../Canvas/canvas\";\r\nimport HexagonGrid from \"./hexagonGrid\";\r\nimport { Coord, Coords } from \"../types/dtypes\";\r\nimport { hexagonStylingProps } from \"../Hexagon/hexagon\";\r\nimport { dispatchNewGridSize } from \"../redux/dispatchers\";\r\n\r\ntype HexagonGridManagerProps = {\r\n  width?: number;\r\n  borderWidth?: number;\r\n  spacing?: number;\r\n  siderWidth: number;\r\n  headerHeight: number;\r\n  windowSize: WindowSize;\r\n};\r\n\r\nexport type CreateGridReturn = {\r\n  coords: Coords;\r\n  offsetX: number;\r\n  offsetY: number;\r\n  sizeX: number;\r\n  sizeY: number;\r\n};\r\n\r\n/**\r\n * Wrapper component to manage overarching state for the hexagon grid, such\r\n * that each change of the HexagonStates don't cause a recalculation of\r\n * static properties\r\n */\r\nconst HexagonGridManager = (props: HexagonGridManagerProps) => {\r\n  const {\r\n    width = 50,\r\n    borderWidth = 10,\r\n    spacing = 5,\r\n    siderWidth,\r\n    headerHeight,\r\n    windowSize,\r\n  } = props;\r\n\r\n  const horizontalSpacing = width + spacing;\r\n  const verticalSpacing = (Math.sqrt(3) / 2) * width + spacing / 2;\r\n\r\n  /**\r\n   * Given the size of the window to display the grid, calculates the list of possible\r\n   * coordinates, the available border width for the grid, and the dimensions of the grid\r\n   * @param {number} windowSize\r\n   */\r\n  const createGrid = (\r\n    windowSize: WindowSize,\r\n    siderWidth: number,\r\n    headerHeight: number\r\n  ): CreateGridReturn | undefined => {\r\n    if (windowSize.height !== 0 && windowSize.width !== 0) {\r\n      const sizeX = Math.floor(\r\n        (windowSize.width - siderWidth - horizontalSpacing / 2) /\r\n          horizontalSpacing\r\n      );\r\n\r\n      const sizeY = Math.floor(\r\n        (windowSize.height - headerHeight - (Math.sqrt(3) / 3) * width) /\r\n          verticalSpacing\r\n      );\r\n\r\n      const offsetX =\r\n        (windowSize.width - siderWidth - (sizeX + 0.5) * horizontalSpacing) / 2;\r\n      const offsetY =\r\n        (windowSize.height - headerHeight - (sizeY + 0.5) * verticalSpacing) /\r\n        2;\r\n\r\n      const coords: Coords = [];\r\n\r\n      for (let i = 0; i < sizeX; i++) {\r\n        for (let j = 0; j < sizeY; j++) {\r\n          const coord: Coord = [i, j];\r\n          coords.push(coord);\r\n        }\r\n      }\r\n\r\n      return { coords, offsetX, offsetY, sizeX, sizeY };\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Converts a coordinate into a pixel coordinate\r\n   * @param {number} x\r\n   * @param {number} y\r\n   */\r\n  const coordToPixels = (x: number, y: number): Coord => {\r\n    let pixelsX = horizontalSpacing * x;\r\n    const pixelsY = verticalSpacing * y + (Math.sqrt(3) / 6) * width;\r\n    if (y % 2 === 1) {\r\n      pixelsX += horizontalSpacing / 2;\r\n    }\r\n\r\n    return [pixelsX, pixelsY];\r\n  };\r\n\r\n  const gridProps = createGrid(windowSize, siderWidth, headerHeight);\r\n\r\n  if (gridProps) {\r\n    dispatchNewGridSize(gridProps?.sizeX, gridProps?.sizeY);\r\n\r\n    // Calculate the styling props once and then use it for all hexagons\r\n    const hexagonCssProps = hexagonStylingProps({\r\n      width,\r\n    });\r\n    const reducedHexagonCssProps = hexagonStylingProps({\r\n      width: width - borderWidth,\r\n    });\r\n\r\n    const pixelsCoords: Coords = gridProps?.coords.map((coord: Coord) =>\r\n      coordToPixels(...coord)\r\n    );\r\n    return (\r\n      <HexagonGrid\r\n        {...{\r\n          largeHex: hexagonCssProps,\r\n          smallHex: reducedHexagonCssProps,\r\n          pixelsCoords,\r\n          gridProps,\r\n        }}\r\n      />\r\n    );\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport default HexagonGridManager;\r\n","import React, { useState, useRef } from \"react\";\r\nimport { Layout, Menu, Button } from \"antd\";\r\nimport {\r\n  UserOutlined,\r\n  LaptopOutlined,\r\n  NotificationOutlined,\r\n  GithubOutlined,\r\n  LinkedinOutlined,\r\n} from \"@ant-design/icons\";\r\nimport \"./toolbar.css\";\r\nimport \"antd/dist/antd.css\";\r\nimport Canvas from \"../Canvas/canvas\";\r\nimport { router } from \"../Algorithms/base\";\r\nimport HexagonGridManager from \"../HexagonGrid/hexagonGridManager\";\r\nimport { useSelector } from \"react-redux\";\r\nimport store, { Store } from \"../redux/store\";\r\nimport { dispatchResetAnimation } from \"../redux/dispatchers\";\r\nimport {\r\n  dispatchNewSelected,\r\n  dispatchNewAlgorithm,\r\n} from \"../redux/dispatchers\";\r\nimport { Overlay } from \"react-bootstrap\";\r\nimport maze from \"../assets/maze.svg\";\r\nimport Paragraph from \"antd/lib/typography/Paragraph\";\r\n\r\nconst { SubMenu } = Menu;\r\nconst { Sider, Header } = Layout;\r\n\r\nconst Toolbar = () => {\r\n  const siderWidth: number = 200;\r\n  const headerHeight: number = 70;\r\n  const headerStyle = {\r\n    height: `${headerHeight}px`,\r\n  };\r\n\r\n  const goal = useSelector((state: Store) => state.fullHexagonStates.goal);\r\n  const start = useSelector((state: Store) => state.fullHexagonStates.start);\r\n  const animated = useSelector(\r\n    (state: Store) => state.fullHexagonStates.animated.length !== 0\r\n  );\r\n  const algorithm = useSelector((state: Store) => state.algorithm);\r\n\r\n  const [displayPlayback, setDisplayPlayback] = useState(false);\r\n\r\n  return (\r\n    <Layout>\r\n      <Header\r\n        style={{ ...headerStyle, paddingLeft: \"0px\", paddingRight: \"0px\" }}\r\n      >\r\n        <div\r\n          style={{\r\n            width: `${siderWidth}px`,\r\n            paddingLeft: \"20px\",\r\n            float: \"left\",\r\n            ...headerStyle,\r\n          }}\r\n        >\r\n          <img src={maze} alt={\"\"} width={\"50px\"} height={\"50px\"} />\r\n          <Paragraph\r\n            style={{ color: \"#a6adac\", float: \"right\", paddingRight: \"30px\" }}\r\n          >\r\n            Path Finder\r\n          </Paragraph>\r\n        </div>\r\n        <Menu\r\n          theme=\"dark\"\r\n          mode=\"horizontal\"\r\n          style={{\r\n            position: \"relative\",\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n          }}\r\n        >\r\n          <Menu.Item\r\n            key=\"tutorial\"\r\n            style={{ ...headerStyle, position: \"absolute\", top: 0, left: 0 }}\r\n          >\r\n            Tutorial\r\n          </Menu.Item>\r\n          <Menu.Item\r\n            key=\"playback\"\r\n            style={{ ...headerStyle, position: \"relative\", float: \"left\" }}\r\n          >\r\n            Playback Controls\r\n          </Menu.Item>\r\n          <Menu.Item\r\n            key=\"phone\"\r\n            style={{\r\n              ...headerStyle,\r\n              position: \"absolute\",\r\n              top: 0,\r\n              right: 160,\r\n              height: `${headerHeight}px`,\r\n            }}\r\n          >\r\n            <Paragraph style={{ color: \"#a6adac\" }} copyable>\r\n              +44 (0)7956-731633\r\n            </Paragraph>\r\n          </Menu.Item>\r\n          <Menu.Item\r\n            key=\"github\"\r\n            style={{\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n              float: \"right\",\r\n              position: \"absolute\",\r\n              top: 0,\r\n              right: 80,\r\n              height: `${headerHeight}px`,\r\n            }}\r\n          >\r\n            <Button\r\n              type=\"link\"\r\n              href={\"https://www.github.com/GeorgeSheppard/\"}\r\n              style={{\r\n                height: \"40px\",\r\n                width: \"44px\",\r\n                paddingLeft: \"2px\",\r\n                paddingRight: \"2px\",\r\n              }}\r\n            >\r\n              <GithubOutlined\r\n                style={{\r\n                  fontSize: `35px`,\r\n                }}\r\n              />\r\n            </Button>\r\n          </Menu.Item>\r\n          <Menu.Item\r\n            key=\"linkedin\"\r\n            style={{\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n              float: \"right\",\r\n              position: \"absolute\",\r\n              top: 0,\r\n              right: 0,\r\n              height: `${headerHeight}px`,\r\n            }}\r\n          >\r\n            <Button\r\n              type=\"link\"\r\n              href={\"https://www.linkedin.com/in/georgesheppard/\"}\r\n              style={{\r\n                height: \"40px\",\r\n                width: \"44px\",\r\n                paddingLeft: \"2px\",\r\n                paddingRight: \"2px\",\r\n              }}\r\n            >\r\n              <LinkedinOutlined\r\n                style={{\r\n                  fontSize: `35px`,\r\n                }}\r\n              />\r\n            </Button>\r\n          </Menu.Item>\r\n        </Menu>\r\n      </Header>\r\n      <Layout>\r\n        <Sider width={siderWidth} className=\"site-layout-background\">\r\n          <Menu mode=\"inline\" style={{ height: \"100vh\" }}>\r\n            <SubMenu\r\n              key=\"sub1\"\r\n              icon={<UserOutlined />}\r\n              title=\"Required\"\r\n              style={{\r\n                color:\r\n                  start.length === 0 || goal.length === 0 ? \"red\" : undefined,\r\n              }}\r\n            >\r\n              <Menu.Item\r\n                key=\"1\"\r\n                onClick={() => dispatchNewSelected(\"start\")}\r\n                style={{\r\n                  color: start.length === 0 ? \"red\" : undefined,\r\n                }}\r\n              >\r\n                Start\r\n              </Menu.Item>\r\n              <Menu.Item\r\n                key=\"2\"\r\n                onClick={() => dispatchNewSelected(\"goal\")}\r\n                style={{\r\n                  color: goal.length === 0 ? \"red\" : undefined,\r\n                }}\r\n              >\r\n                Goal\r\n              </Menu.Item>\r\n            </SubMenu>\r\n            <SubMenu key=\"sub2\" icon={<LaptopOutlined />} title=\"Optional\">\r\n              <Menu.Item key=\"3\" onClick={() => dispatchNewSelected(\"wall\")}>\r\n                Wall\r\n              </Menu.Item>\r\n              <Menu.Item key=\"4\" onClick={() => dispatchNewSelected(\"space\")}>\r\n                Space\r\n              </Menu.Item>\r\n            </SubMenu>\r\n            <SubMenu\r\n              key=\"sub3\"\r\n              icon={<NotificationOutlined />}\r\n              title=\"Algorithm\"\r\n              style={{\r\n                color: algorithm.length === 0 ? \"red\" : undefined,\r\n              }}\r\n            >\r\n              <Menu.Item\r\n                key=\"9\"\r\n                onClick={() => dispatchNewAlgorithm(\"dijkstra\")}\r\n              >\r\n                Dijkstra\r\n              </Menu.Item>\r\n              {/* <Menu.Item\r\n                key=\"10\"\r\n                onClick={() => dispatchNewAlgorithm(\"greedy\")}\r\n              >\r\n                Greedy\r\n              </Menu.Item> */}\r\n            </SubMenu>\r\n            <div\r\n              style={{\r\n                // display: \"flex\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n                marginTop: \"20px\",\r\n                marginRight: \"10px\",\r\n                marginLeft: \"10px\",\r\n              }}\r\n            >\r\n              <Button\r\n                type=\"primary\"\r\n                shape=\"round\"\r\n                size={\"large\"}\r\n                disabled={\r\n                  algorithm.length === 0 ||\r\n                  goal.length === 0 ||\r\n                  start.length === 0\r\n                }\r\n                onClick={() => {\r\n                  const gridSize = store.getState().gridSize;\r\n                  const hexagonStates = store.getState().fullHexagonStates;\r\n                  router(\r\n                    algorithm,\r\n                    hexagonStates,\r\n                    gridSize.sizeX,\r\n                    gridSize.sizeY\r\n                  );\r\n                }}\r\n                block={true}\r\n              >\r\n                Visualise\r\n              </Button>\r\n              <Button\r\n                type=\"primary\"\r\n                shape=\"round\"\r\n                size={\"large\"}\r\n                disabled={!animated}\r\n                onClick={() => dispatchResetAnimation()}\r\n                style={{\r\n                  marginTop: \"20px\",\r\n                }}\r\n                block\r\n              >\r\n                Reset\r\n              </Button>\r\n            </div>\r\n          </Menu>\r\n        </Sider>\r\n        <Canvas\r\n          Component={HexagonGridManager}\r\n          {...{\r\n            siderWidth,\r\n            headerHeight,\r\n          }}\r\n        />\r\n      </Layout>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default Toolbar;\r\n","import React from \"react\";\r\nimport Toolbar from \"./Toolbar/toolbar\";\r\nimport { dispatchNewMouseState } from \"./redux/dispatchers\";\r\n\r\nconst App = () => {\r\n  const handleMouseDown = (state) => {\r\n    return (event) => {\r\n      if (event.button === 0) {\r\n        dispatchNewMouseState(state)\r\n      }\r\n    };\r\n  };\r\n\r\n  return (\r\n    <div onMouseDown={handleMouseDown(true)} onMouseUp={handleMouseDown(false)}>\r\n        <Toolbar />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./redux/store\";\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}