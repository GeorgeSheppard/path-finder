import { neighbours } from "./base";

describe("neighbours function", () => {
  test("even row number", () => {
    const startingCoord = [6, 6];
    const expectedResult = [
      [5, 5],
      [5, 6],
      [6, 7],
      [7, 6],
      [7, 5],
      [6, 5],
    ];

    expect(neighbours(startingCoord, 10, 10)).toEqual(expectedResult);
  });

  test("odd row number", () => {
    const startingCoord = [5, 3];
    const expectedResult = [
      [4, 3],
      [4, 4],
      [5, 4],
      [6, 4],
      [6, 3],
      [5, 2],
    ];

    expect(neighbours(startingCoord, 10, 10)).toEqual(expectedResult);
  });

  describe("out of bounds coordinates filtered", () => {
    test("negative coordinates", () => {
      const startingCoord = [0, 0];

      expect(neighbours(startingCoord, 5, 5)).toEqual([
        [0, 1],
        [1, 0],
      ]);
    });

    test("larger than grid size", () => {
      const startingCoord = [9, 9];

      expect(neighbours(startingCoord, 10, 10)).toEqual([
        [8, 9],
        [9, 8],
      ]);
    });
  });
});

const hexagonStates = {
  goal: [[7, 3]],
  start: [[4, 5]],
  wall: [
    [8, 2],
    [5, 4],
    [6, 7],
    [5, 5],
    [6, 4],
    [7, 4],
    [6, 5],
    [7, 6],
    [4, 3],
    [4, 2],
    [3, 2],
    [7, 7],
    [8, 6],
    [8, 5],
    [4, 7],
    [5, 8],
    [5, 9],
    [6, 10],
    [7, 10],
    [8, 10],
    [9, 10],
    [10, 10],
    [10, 9],
    [11, 10],
    [11, 11],
    [11, 12],
    [9, 5],
    [10, 6],
    [10, 7],
    [11, 7],
    [12, 8],
    [12, 7],
    [13, 8],
    [9, 2],
    [10, 2],
    [10, 3],
    [11, 3],
    [12, 3],
    [13, 4],
    [14, 4],
    [4, 0],
    [3, 0],
    [5, 3],
    [6, 2],
    [6, 1],
    [7, 0],
    [2, 5],
    [2, 6],
    [1, 7],
    [1, 8],
    [2, 8],
    [1, 9],
    [2, 10],
    [2, 11],
    [3, 11],
    [4, 11],
    [4, 12],
    [3, 12],
    [2, 13],
    [7, 12],
    [6, 13],
    [5, 13],
    [5, 14],
    [4, 14],
    [3, 15],
    [3, 16],
    [2, 16],
    [1, 17],
    [1, 18],
    [6, 17],
    [7, 16],
    [7, 15],
    [8, 14],
    [8, 13],
    [9, 12],
    [8, 12],
    [10, 14],
    [10, 15],
    [11, 15],
    [12, 16],
    [13, 16],
    [14, 16],
    [14, 15],
    [14, 14],
    [14, 13],
    [13, 13],
    [14, 12],
    [15, 9],
    [16, 9],
    [17, 10],
    [18, 10],
    [17, 11],
    [18, 12],
    [17, 13],
    [18, 14],
    [15, 6],
    [16, 6],
    [17, 6],
    [18, 6],
    [19, 6],
    [19, 7],
    [20, 8],
    [16, 4],
    [16, 3],
    [17, 4],
    [17, 3],
    [18, 4],
    [19, 4],
    [20, 4],
    [19, 3],
    [19, 2],
    [18, 1],
    [17, 1],
    [16, 1],
    [15, 1],
    [14, 1],
    [13, 1],
    [12, 1],
    [21, 1],
    [22, 3],
    [22, 4],
    [23, 4],
    [22, 5],
    [23, 6],
    [23, 7],
    [24, 8],
    [23, 9],
    [24, 10],
    [23, 11],
    [23, 12],
    [22, 12],
  ],
  animated: [],
  path: [],
};
